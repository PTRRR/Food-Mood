var scheduledIntervalIdentifiers = new Map();
var scheduledTimeoutIdentifiers = new Map();
export var clearScheduledInterval = function (timerId) {
    var identifier = scheduledIntervalIdentifiers.get(timerId);
    if (identifier !== undefined) {
        clearTimeout(identifier);
        scheduledIntervalIdentifiers.delete(timerId);
    }
    else {
        throw new Error("There is no interval scheduled with the given id \"" + timerId + "\".");
    }
};
export var clearScheduledTimeout = function (timerId) {
    var identifier = scheduledTimeoutIdentifiers.get(timerId);
    if (identifier !== undefined) {
        clearTimeout(identifier);
        scheduledTimeoutIdentifiers.delete(timerId);
    }
    else {
        throw new Error("There is no timeout scheduled with the given id \"" + timerId + "\".");
    }
};
var computeDelayAndExpectedCallbackTime = function (delay, nowInMainThread) {
    var now;
    if ('performance' in self) {
        var nowInWorker = performance.now();
        var elapsed = Math.max(0, nowInWorker - nowInMainThread);
        delay -= elapsed;
        now = nowInWorker;
    }
    else {
        now = Date.now();
    }
    var expected = now + delay;
    return { delay: delay, expected: expected };
};
var setTimeoutCallback = function (identifiers, timerId, expected, timerType) {
    var now = ('performance' in self) ? performance.now() : Date.now();
    if (now > expected) {
        postMessage({ id: null, method: 'call', params: { timerId: timerId, timerType: timerType } });
    }
    else {
        identifiers.set(timerId, setTimeout(setTimeoutCallback, (expected - now), identifiers, timerId, expected, timerType));
    }
};
export var scheduleInterval = function (delay, timerId, nowInMainThread) {
    var expected;
    (_a = computeDelayAndExpectedCallbackTime(delay, nowInMainThread), delay = _a.delay, expected = _a.expected);
    scheduledIntervalIdentifiers.set(timerId, setTimeout(setTimeoutCallback, delay, scheduledIntervalIdentifiers, timerId, expected, 'interval'));
    var _a;
};
export var scheduleTimeout = function (delay, timerId, nowInMainThread) {
    var expected;
    (_a = computeDelayAndExpectedCallbackTime(delay, nowInMainThread), delay = _a.delay, expected = _a.expected);
    scheduledTimeoutIdentifiers.set(timerId, setTimeout(setTimeoutCallback, delay, scheduledTimeoutIdentifiers, timerId, expected, 'timeout'));
    var _a;
};
//# sourceMappingURL=/users/chrisguttandin/repositories/worker-timers-worker/node_modules/tsconfig-holy-grail/src/helpers/timer.js.map