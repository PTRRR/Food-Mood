(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.workerTimers = global.workerTimers || {})));
}(this, (function (exports) { 'use strict';

var isCallNotification = function isCallNotification(message) {
    return message.method !== undefined && message.method === 'call';
};

var isClearResponse = function isClearResponse(message) {
    return message.error === null && typeof message.id === 'number';
};

var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
var generateUniqueId = function generateUniqueId(map) {
    var id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    while (map.has(id)) {
        id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    }
    return id;
};
var load = function load(url) {
    var scheduledIntervalFunctions = new Map();
    var scheduledTimeoutFunctions = new Map();
    var unrespondedRequests = new Map();
    var worker = new Worker(url);
    worker.addEventListener('message', function (_a) {
        var data = _a.data;
        if (isCallNotification(data)) {
            var _b = data.params,
                timerId = _b.timerId,
                timerType = _b.timerType;
            if (timerType === 'interval') {
                var idOrFunc = scheduledIntervalFunctions.get(timerId);
                if (typeof idOrFunc === 'number') {
                    var timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
                    if (timerIdAndTimerType === undefined || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                        throw new Error('The timer is in an undefined state.');
                    }
                } else if (typeof idOrFunc !== 'undefined') {
                    idOrFunc();
                } else {
                    throw new Error('The timer is in an undefined state.');
                }
            } else if (timerType === 'timeout') {
                var idOrFunc = scheduledTimeoutFunctions.get(timerId);
                if (typeof idOrFunc === 'number') {
                    var timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
                    if (timerIdAndTimerType === undefined || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                        throw new Error('The timer is in an undefined state.');
                    }
                } else if (typeof idOrFunc !== 'undefined') {
                    idOrFunc();
                    // A timeout can be savely deleted because it is only called once.
                    scheduledTimeoutFunctions.delete(timerId);
                } else {
                    throw new Error('The timer is in an undefined state.');
                }
            }
        } else if (isClearResponse(data)) {
            var id = data.id;
            var timerIdAndTimerType = unrespondedRequests.get(id);
            if (timerIdAndTimerType === undefined) {
                throw new Error('The timer is in an undefined state.');
            } else {
                var timerId = timerIdAndTimerType.timerId,
                    timerType = timerIdAndTimerType.timerType;
                unrespondedRequests.delete(id);
                if (timerType === 'interval') {
                    scheduledIntervalFunctions.delete(timerId);
                } else {
                    scheduledTimeoutFunctions.delete(timerId);
                }
            }
        } else {
            console.log(data);
            var message = data.error.message;
            throw new Error(message);
        }
    });
    var clearInterval = function clearInterval(timerId) {
        var id = generateUniqueId(unrespondedRequests);
        unrespondedRequests.set(id, { timerId: timerId, timerType: 'interval' });
        scheduledIntervalFunctions.set(timerId, id);
        worker.postMessage({
            id: id,
            method: 'clear',
            params: { timerId: timerId, timerType: 'interval' }
        });
    };
    var clearTimeout = function clearTimeout(timerId) {
        var id = generateUniqueId(unrespondedRequests);
        unrespondedRequests.set(id, { timerId: timerId, timerType: 'timeout' });
        scheduledTimeoutFunctions.set(timerId, id);
        worker.postMessage({
            id: id,
            method: 'clear',
            params: { timerId: timerId, timerType: 'timeout' }
        });
    };
    var setInterval = function setInterval(func, delay) {
        var timerId = generateUniqueId(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(timerId, function () {
            func();
            // Doublecheck if the interval should still be rescheduled because it could have been cleared inside of func().
            if (typeof scheduledIntervalFunctions.get(timerId) === 'function') {
                worker.postMessage({
                    id: null,
                    method: 'set',
                    params: {
                        delay: delay,
                        now: performance.now(),
                        timerId: timerId,
                        timerType: 'interval'
                    }
                });
            }
        });
        worker.postMessage({
            id: null,
            method: 'set',
            params: {
                delay: delay,
                now: performance.now(),
                timerId: timerId,
                timerType: 'interval'
            }
        });
        return timerId;
    };
    var setTimeout = function setTimeout(func, delay) {
        var timerId = generateUniqueId(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(timerId, func);
        worker.postMessage({
            id: null,
            method: 'set',
            params: {
                delay: delay,
                now: performance.now(),
                timerId: timerId,
                timerType: 'timeout'
            }
        });
        return timerId;
    };
    return {
        clearInterval: clearInterval,
        clearTimeout: clearTimeout,
        setInterval: setInterval,
        setTimeout: setTimeout
    };
};

// tslint:disable-next-line:max-line-length
// tslint:disable-next-line:max-line-length
var worker = "!function(){\"use strict\";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error('There is no interval scheduled with the given id \"'+t+'\".');clearTimeout(r),e.delete(t)},i=function(e){var r=t.get(e);if(void 0===r)throw new Error('There is no timeout scheduled with the given id \"'+e+'\".');clearTimeout(r),t.delete(e)},o=function(e,t){var r=void 0;if(\"performance\"in self){var i=performance.now();e-=Math.max(0,i-t),r=i}else r=Date.now();return{delay:e,expected:r+e}},n=function e(t,r,i,o){var n=\"performance\"in self?performance.now():Date.now();n>i?postMessage({id:null,method:\"call\",params:{timerId:r,timerType:o}}):t.set(r,setTimeout(e,i-n,t,r,i,o))},a=function(t,r,i){var a=void 0,s=o(t,i);t=s.delay,a=s.expected,e.set(r,setTimeout(n,t,e,r,a,\"interval\"))},s=function(e,r,i){var a=void 0,s=o(e,i);e=s.delay,a=s.expected,t.set(r,setTimeout(n,e,t,r,a,\"timeout\"))};addEventListener(\"message\",function(e){var t=e.data;try{if(\"clear\"===t.method){var o=t.id,n=t.params,d=n.timerId,l=n.timerType;if(\"interval\"===l)r(d),postMessage({error:null,id:o});else{if(\"timeout\"!==l)throw new Error('The given type \"'+l+'\" is not supported');i(d),postMessage({error:null,id:o})}}else{if(\"set\"!==t.method)throw new Error('The given method \"'+t.method+'\" is not supported');var m=t.params,u=m.delay,p=m.now,v=m.timerId,c=m.timerType;if(\"interval\"===c)a(u,v,p);else{if(\"timeout\"!==c)throw new Error('The given type \"'+c+'\" is not supported');s(u,v,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}})}();";

var blob = new Blob([worker], { type: 'application/javascript' });
var url = URL.createObjectURL(blob);
var workerTimers = load(url);
var clearInterval = workerTimers.clearInterval;
var clearTimeout = workerTimers.clearTimeout;
var setInterval = workerTimers.setInterval;
var setTimeout = workerTimers.setTimeout;

exports.clearInterval = clearInterval;
exports.clearTimeout = clearTimeout;
exports.setInterval = setInterval;
exports.setTimeout = setTimeout;

Object.defineProperty(exports, '__esModule', { value: true });

})));
