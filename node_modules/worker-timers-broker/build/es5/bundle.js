(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.workerTimersBroker = global.workerTimersBroker || {})));
}(this, (function (exports) { 'use strict';

var isCallNotification = function isCallNotification(message) {
    return message.method !== undefined && message.method === 'call';
};

var isClearResponse = function isClearResponse(message) {
    return message.error === null && typeof message.id === 'number';
};

var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
var generateUniqueId = function generateUniqueId(map) {
    var id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    while (map.has(id)) {
        id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    }
    return id;
};
var load = function load(url) {
    var scheduledIntervalFunctions = new Map();
    var scheduledTimeoutFunctions = new Map();
    var unrespondedRequests = new Map();
    var worker = new Worker(url);
    worker.addEventListener('message', function (_ref) {
        var data = _ref.data;

        if (isCallNotification(data)) {
            var _data$params = data.params,
                timerId = _data$params.timerId,
                timerType = _data$params.timerType;

            if (timerType === 'interval') {
                var idOrFunc = scheduledIntervalFunctions.get(timerId);
                if (typeof idOrFunc === 'number') {
                    var timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
                    if (timerIdAndTimerType === undefined || timerIdAndTimerType.timerId !== timerId || timerIdAndTimerType.timerType !== timerType) {
                        throw new Error('The timer is in an undefined state.');
                    }
                } else if (typeof idOrFunc !== 'undefined') {
                    idOrFunc();
                } else {
                    throw new Error('The timer is in an undefined state.');
                }
            } else if (timerType === 'timeout') {
                var _idOrFunc = scheduledTimeoutFunctions.get(timerId);
                if (typeof _idOrFunc === 'number') {
                    var _timerIdAndTimerType = unrespondedRequests.get(_idOrFunc);
                    if (_timerIdAndTimerType === undefined || _timerIdAndTimerType.timerId !== timerId || _timerIdAndTimerType.timerType !== timerType) {
                        throw new Error('The timer is in an undefined state.');
                    }
                } else if (typeof _idOrFunc !== 'undefined') {
                    _idOrFunc();
                    // A timeout can be savely deleted because it is only called once.
                    scheduledTimeoutFunctions.delete(timerId);
                } else {
                    throw new Error('The timer is in an undefined state.');
                }
            }
        } else if (isClearResponse(data)) {
            var id = data.id;

            var _timerIdAndTimerType2 = unrespondedRequests.get(id);
            if (_timerIdAndTimerType2 === undefined) {
                throw new Error('The timer is in an undefined state.');
            } else {
                var _timerId = _timerIdAndTimerType2.timerId,
                    _timerType = _timerIdAndTimerType2.timerType;

                unrespondedRequests.delete(id);
                if (_timerType === 'interval') {
                    scheduledIntervalFunctions.delete(_timerId);
                } else {
                    scheduledTimeoutFunctions.delete(_timerId);
                }
            }
        } else {
            console.log(data);
            var message = data.error.message;

            throw new Error(message);
        }
    });
    var clearInterval = function clearInterval(timerId) {
        var id = generateUniqueId(unrespondedRequests);
        unrespondedRequests.set(id, { timerId: timerId, timerType: 'interval' });
        scheduledIntervalFunctions.set(timerId, id);
        worker.postMessage({
            id: id,
            method: 'clear',
            params: { timerId: timerId, timerType: 'interval' }
        });
    };
    var clearTimeout = function clearTimeout(timerId) {
        var id = generateUniqueId(unrespondedRequests);
        unrespondedRequests.set(id, { timerId: timerId, timerType: 'timeout' });
        scheduledTimeoutFunctions.set(timerId, id);
        worker.postMessage({
            id: id,
            method: 'clear',
            params: { timerId: timerId, timerType: 'timeout' }
        });
    };
    var setInterval = function setInterval(func, delay) {
        var timerId = generateUniqueId(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(timerId, function () {
            func();
            // Doublecheck if the interval should still be rescheduled because it could have been cleared inside of func().
            if (typeof scheduledIntervalFunctions.get(timerId) === 'function') {
                worker.postMessage({
                    id: null,
                    method: 'set',
                    params: {
                        delay: delay,
                        now: performance.now(),
                        timerId: timerId,
                        timerType: 'interval'
                    }
                });
            }
        });
        worker.postMessage({
            id: null,
            method: 'set',
            params: {
                delay: delay,
                now: performance.now(),
                timerId: timerId,
                timerType: 'interval'
            }
        });
        return timerId;
    };
    var setTimeout = function setTimeout(func, delay) {
        var timerId = generateUniqueId(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(timerId, func);
        worker.postMessage({
            id: null,
            method: 'set',
            params: {
                delay: delay,
                now: performance.now(),
                timerId: timerId,
                timerType: 'timeout'
            }
        });
        return timerId;
    };
    return {
        clearInterval: clearInterval,
        clearTimeout: clearTimeout,
        setInterval: setInterval,
        setTimeout: setTimeout
    };
};

exports.load = load;

Object.defineProperty(exports, '__esModule', { value: true });

})));
