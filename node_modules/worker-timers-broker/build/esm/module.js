import { isCallNotification } from './guards/call-notification';
import { isClearResponse } from './guards/clear-response';
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
var generateUniqueId = function (map) {
    var id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    while (map.has(id)) {
        id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    }
    return id;
};
export var load = function (url) {
    var scheduledIntervalFunctions = new Map();
    var scheduledTimeoutFunctions = new Map();
    var unrespondedRequests = new Map();
    var worker = new Worker(url);
    worker.addEventListener('message', function (_a) {
        var data = _a.data;
        if (isCallNotification(data)) {
            var _b = data.params, timerId = _b.timerId, timerType = _b.timerType;
            if (timerType === 'interval') {
                var idOrFunc = scheduledIntervalFunctions.get(timerId);
                if (typeof idOrFunc === 'number') {
                    var timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
                    if (timerIdAndTimerType === undefined
                        || timerIdAndTimerType.timerId !== timerId
                        || timerIdAndTimerType.timerType !== timerType) {
                        throw new Error('The timer is in an undefined state.');
                    }
                }
                else if (typeof idOrFunc !== 'undefined') {
                    idOrFunc();
                }
                else {
                    throw new Error('The timer is in an undefined state.');
                }
            }
            else if (timerType === 'timeout') {
                var idOrFunc = scheduledTimeoutFunctions.get(timerId);
                if (typeof idOrFunc === 'number') {
                    var timerIdAndTimerType = unrespondedRequests.get(idOrFunc);
                    if (timerIdAndTimerType === undefined
                        || timerIdAndTimerType.timerId !== timerId
                        || timerIdAndTimerType.timerType !== timerType) {
                        throw new Error('The timer is in an undefined state.');
                    }
                }
                else if (typeof idOrFunc !== 'undefined') {
                    idOrFunc();
                    // A timeout can be savely deleted because it is only called once.
                    scheduledTimeoutFunctions.delete(timerId);
                }
                else {
                    throw new Error('The timer is in an undefined state.');
                }
            }
        }
        else if (isClearResponse(data)) {
            var id = data.id;
            var timerIdAndTimerType = unrespondedRequests.get(id);
            if (timerIdAndTimerType === undefined) {
                throw new Error('The timer is in an undefined state.');
            }
            else {
                var timerId = timerIdAndTimerType.timerId, timerType = timerIdAndTimerType.timerType;
                unrespondedRequests.delete(id);
                if (timerType === 'interval') {
                    scheduledIntervalFunctions.delete(timerId);
                }
                else {
                    scheduledTimeoutFunctions.delete(timerId);
                }
            }
        }
        else {
            console.log(data);
            var message = data.error.message;
            throw new Error(message);
        }
    });
    var clearInterval = function (timerId) {
        var id = generateUniqueId(unrespondedRequests);
        unrespondedRequests.set(id, { timerId: timerId, timerType: 'interval' });
        scheduledIntervalFunctions.set(timerId, id);
        worker.postMessage({
            id: id,
            method: 'clear',
            params: { timerId: timerId, timerType: 'interval' }
        });
    };
    var clearTimeout = function (timerId) {
        var id = generateUniqueId(unrespondedRequests);
        unrespondedRequests.set(id, { timerId: timerId, timerType: 'timeout' });
        scheduledTimeoutFunctions.set(timerId, id);
        worker.postMessage({
            id: id,
            method: 'clear',
            params: { timerId: timerId, timerType: 'timeout' }
        });
    };
    var setInterval = function (func, delay) {
        var timerId = generateUniqueId(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(timerId, function () {
            func();
            // Doublecheck if the interval should still be rescheduled because it could have been cleared inside of func().
            if (typeof scheduledIntervalFunctions.get(timerId) === 'function') {
                worker.postMessage({
                    id: null,
                    method: 'set',
                    params: {
                        delay: delay,
                        now: performance.now(),
                        timerId: timerId,
                        timerType: 'interval'
                    }
                });
            }
        });
        worker.postMessage({
            id: null,
            method: 'set',
            params: {
                delay: delay,
                now: performance.now(),
                timerId: timerId,
                timerType: 'interval'
            }
        });
        return timerId;
    };
    var setTimeout = function (func, delay) {
        var timerId = generateUniqueId(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(timerId, func);
        worker.postMessage({
            id: null,
            method: 'set',
            params: {
                delay: delay,
                now: performance.now(),
                timerId: timerId,
                timerType: 'timeout'
            }
        });
        return timerId;
    };
    return {
        clearInterval: clearInterval,
        clearTimeout: clearTimeout,
        setInterval: setInterval,
        setTimeout: setTimeout
    };
};
//# sourceMappingURL=/users/chrisguttandin/repositories/worker-timers-broker/node_modules/tsconfig-holy-grail/src/module.js.map